// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// xml HTTP server encoders and decoders
//
// Command:
// $ goa gen goa.design/examples/encodings/design

package server

import (
	"context"
	"io"
	"net/http"

	xml "goa.design/examples/encodings/gen/xml"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// EncodeConvertResponse returns an encoder for responses returned by the xml
// convert endpoint.
func EncodeConvertResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*xml.JSONObject)
		enc := encoder(ctx, w)
		body := NewConvertResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeConvertRequest returns a decoder for requests sent to the xml convert
// endpoint.
func DecodeConvertRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ConvertRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewConvertPayload(&body)

		return payload, nil
	}
}
